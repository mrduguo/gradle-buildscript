project.buildscript{
    repositories {
        jcenter()
        maven {
            url '@mavenRepoUrl@'
        }
        if(System.properties.additionalMavenRpoUrl || '@mavenRepoUrl@'.startsWith('file')){
            maven {
                url System.properties.additionalMavenRpoUrl ?: 'https://dl.bintray.com/mrduguo/maven/'
            }
        }
    }
    dependencies {
        def versionRange=System.properties.buildscriptVersion
        if(!versionRange){
            versionRange='+'
            try{
                def gitBranch=System.properties.branchName ?:System.properties.GIT_BRANCH ?:System.getenv().GIT_BRANCH ?: 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
                def matcher = gitBranch =~ /\/(\d+)\.(\d+)\.(\d+)/
                if(!matcher.find()) {
                    matcher=null
                    def jobName=System.properties.JOB_NAME ?: System.getenv().JOB_NAME
                    if(jobName){
                        def envNameSection=jobName.split('-').first()
                        matcher = envNameSection =~ /(\d)(\d\d)(\d\d)/
                        if (!matcher.find()) {
                            matcher = envNameSection =~ /(\d)(\d\d)(\d)/
                            if (!matcher.find()) {
                                matcher = envNameSection =~ /(\d)(\d)(\d)/
                                if (!matcher.find()) {
                                    matcher=null
                                }
                            }
                        }

                    }
                }
                if (matcher!=null) {
                    def matcherResult=matcher[0]
                    versionRange= "(,${matcherResult[1]}.${matcherResult[2]}.${matcherResult[3].toInteger() + 1})".toString()
                }
            }catch(Exception mayNotGitRepo){
                println "WARN maybe not git repo: $mayNotGitRepo.message"
                mayNotGitRepo.printStackTrace()
            }
        }
        classpath "com.github.mrduguo.gradle:gradle-buildscript:$versionRange".toString()
        configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}